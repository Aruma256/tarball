package com.github.aruma256.lottweaks.client;

import static org.junit.jupiter.api.Assertions.*;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.Test;

import com.github.aruma256.lottweaks.testhelper.MinecraftTestBase;

import net.minecraft.block.Blocks;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.util.text.TextFormatting;

class V2ConfigLoaderTest extends MinecraftTestBase {

	@Test
	final void test_createGroupList() throws Exception {
		//TODO
		/*
		Method method = V2ConfigLoader.class.getDeclaredMethod("createGroupList", List.class);
		method.setAccessible(true);
		// sample test case : default config strings generated by 2.2.3a
		assertEquals(
			Arrays.asList(
				Arrays.asList(new ItemState(new ItemStack(Blocks.STONE)), new ItemState(new ItemStack(Blocks.STONE, 1, 1)), new ItemState(new ItemStack(Blocks.STONE, 1, 2))),
				Arrays.asList(new ItemState(new ItemStack(Blocks.DIRT)), new ItemState(new ItemStack(Blocks.DIRT, 1, 1)), new ItemState(new ItemStack(Blocks.DIRT, 1, 2)))
			),
			method.invoke(null, Arrays.asList(
				"//■ LotTweaks BlockGroups (PRIMARY)",
				"//VANILLA BLOCKS",
				"//STONE",
				"minecraft:stone/0,minecraft:stone/1,minecraft:stone/2",
				"",
				"//DIRT",
				"minecraft:dirt/0,minecraft:dirt/1,minecraft:dirt/2"
			))
		);
		*/
	}

	@Test
	final void test_createGroup() throws Exception {
		Method method = V2ConfigLoader.class.getDeclaredMethod("createGroup", String.class);
		method.setAccessible(true);
		// multiple items can be specified, delimited by commas.
		assertEquals(
			Arrays.asList(new ItemState(new ItemStack(Blocks.STONE)), new ItemState(new ItemStack(Blocks.GLASS)), new ItemState(new ItemStack(Items.APPLE))),
			method.invoke(null, "minecraft:stone,minecraft:glass,minecraft:apple")
		);
		// invalid entries are ignored.
		assertEquals(
			Arrays.asList(new ItemState(new ItemStack(Blocks.WHITE_WOOL))),
			method.invoke(null, "minecraft:stone/N,minecraft:wool")
		);
		assertEquals(TextFormatting.RED + "Could not parse 'minecraft:stone/N'", IngameLog.instance.debug_pollLog());
		assertNull(IngameLog.instance.debug_pollLog());
		// commented-out lines are ignored.
		assertNull(method.invoke(null, "//繝�繧ｹ繝�"));
		// empty lines are ignored.
		assertNull(method.invoke(null, ""));
	}

	@Test
	final void test_createItemState() throws Exception {
		Method method = V2ConfigLoader.class.getDeclaredMethod("createItemState", String.class);
		method.setAccessible(true);
		/*
		// meta value can be specified.
		assertEquals(
			new ItemState(new ItemStack(Blocks.STONE, 1, 1)),
			method.invoke(null, "minecraft:stone/1")
		);
		// If meta is omitted, it is regarded as 0.
		assertEquals(
			new ItemState(new ItemStack(Blocks.STONE, 1, 0)),
			method.invoke(null, "minecraft:stone")
		);
		*/
		// If the specified item is not found, null is returned.
		assertNull(method.invoke(null, "minecraft:item_that_doesnt_exist"));
		assertEquals(TextFormatting.RED + "'minecraft:item_that_doesnt_exist' was not found", IngameLog.instance.debug_pollLog());
		assertNull(IngameLog.instance.debug_pollLog());
		// If the input is invalid, null is returned.
		assertNull(method.invoke(null, "minecraft:stone/"));
		assertEquals(TextFormatting.RED + "Could not parse 'minecraft:stone/'", IngameLog.instance.debug_pollLog());
		assertNull(IngameLog.instance.debug_pollLog());
		assertNull(method.invoke(null, "minecraft:stone/N"));
		assertEquals(TextFormatting.RED + "Could not parse 'minecraft:stone/N'", IngameLog.instance.debug_pollLog());
		assertNull(IngameLog.instance.debug_pollLog());
	}

}
