package com.github.aruma256.lottweaks.client;

import static org.junit.jupiter.api.Assertions.*;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.Collections;

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import com.github.aruma256.lottweaks.testhelper.MinecraftTestBase;

import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;

class V2ConfigLoaderTest extends MinecraftTestBase {

	@Test @Disabled
	final void test_createGroupFromLine() throws Exception {
		Method method = V2ConfigLoader.class.getDeclaredMethod("createGroupFromLine", String.class);
		method.setAccessible(true);
		// multiple items can be specified, delimited by commas.
		assertEquals(
			Arrays.asList(new ItemState(new ItemStack(Blocks.STONE)), new ItemState(new ItemStack(Blocks.GLASS)), new ItemState(new ItemStack(Items.APPLE))),
			method.invoke(null, "minecraft:stone,minecraft:glass,minecraft:apple")
		);
		// invalid lines are ignored.
		assertEquals(
			Collections.EMPTY_LIST,
			method.invoke(null, "minecraft:stone/N,minecraft:wool")
		);
		// commented-out lines are ignored.
		assertEquals(
			Collections.EMPTY_LIST,
			method.invoke(null, "//テスト")
		);
		// additional test case : default config strings generated by 2.2.3a
		assertEquals(
			Arrays.asList(
				Arrays.asList(new ItemState(new ItemStack(Blocks.STONE)), new ItemState(new ItemStack(Blocks.STONE, 1, 1)), new ItemState(new ItemStack(Blocks.STONE, 1, 2))),
				Arrays.asList(new ItemState(new ItemStack(Blocks.DIRT)), new ItemState(new ItemStack(Blocks.DIRT, 1, 1)), new ItemState(new ItemStack(Blocks.DIRT, 1, 2)))
			),
			method.invoke(null, Arrays.asList(
				"//■ LotTweaks BlockGroups (PRIMARY)",
				"//VANILLA BLOCKS",
				"//STONE",
				"minecraft:stone/0,minecraft:stone/1,minecraft:stone/2",
				"//DIRT",
				"minecraft:dirt/0,minecraft:dirt/1,minecraft:dirt/2"
			))
		);
	}

	@Test
	final void test_createItemStateFromString() throws Exception {
		Method method = V2ConfigLoader.class.getDeclaredMethod("createItemStateFromString", String.class);
		method.setAccessible(true);
		// meta value can be specified.
		assertEquals(
			new ItemState(new ItemStack(Blocks.STONE, 1, 1)),
			method.invoke(null, "minecraft:stone/1")
		);
		// If meta is omitted, it is regarded as 0.
		assertEquals(
			new ItemState(new ItemStack(Blocks.STONE, 1, 0)),
			method.invoke(null, "minecraft:stone")
		);
		// If the specified item is not found, null is returned.
		assertNull(method.invoke(null, "minecraft:item_that_doesnt_exist"));
		// If the input is invalid, null is returned.
		assertNull(method.invoke(null, "minecraft:stone/"));
		assertNull(method.invoke(null, "minecraft:stone/N"));
	}

}
